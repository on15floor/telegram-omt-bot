import telebot
from bot_utils import read_token, get_coin, get_cube, get_synonym, get_antonym, days_lived, get_horoscope

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_token = read_token('token.txt')
bot = telebot.TeleBot(bot_token)
print('[i] Starting bot')


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start', 'help'])
def command_start(message):
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                                      '/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n'
                                      '/cube - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n'
                                      '/synonym - –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤\n'
                                      '/antonym - –ü–æ–∏—Å–∫ –∞–Ω—Ç–æ–Ω–∏–º–æ–≤\n'
                                      '/days_lived - –í—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–Ω–µ–π –ø—Ä–æ–∂–∏—Ç—ã—Ö –≤–∞–º–∏\n'
                                      '/horoscope - –ì–æ—Ä–æ—Å–∫–æ–ø –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è')


# –ë—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
@bot.message_handler(commands=['coin'])
def command_coin(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton(text='–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ üåï', callback_data='coin'),
                 telebot.types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', callback_data='back'))

    bot.send_photo(message.chat.id, get_coin())
    bot.send_message(message.chat.id, text="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ –º–æ–Ω–µ—Ç–∫—É?", reply_markup=keyboard)


# –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
@bot.message_handler(commands=['cube'])
def command_cube(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton(text='–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ üé≤', callback_data='cube'),
                 telebot.types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', callback_data='back'))

    bot.send_message(message.chat.id, get_cube())
    bot.send_message(message.chat.id, text="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∫—É–±–∏–∫?", reply_markup=keyboard)


# –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (–≤–≤–æ–¥ —Å–ª–æ–≤–∞)
@bot.message_handler(commands=['synonym'])
def command_input_synonym(message):
    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º–∞:')
    bot.register_next_step_handler(sent, command_synonym)


# –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞)
def command_synonym(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–∏–Ω–æ–Ω–∏–º–∞', callback_data='synonym'),
                 telebot.types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', callback_data='back'))

    bot.send_message(message.chat.id, get_synonym(message.text), reply_markup=keyboard)


# –ü–æ–∏—Å–∫ –∞–Ω—Ç–æ–Ω–∏–º–æ–≤ (–≤–≤–æ–¥ —Å–ª–æ–≤–∞)
@bot.message_handler(commands=['antonym'])
def command_input_antonym(message):
    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ –∞–Ω—Ç–æ–Ω–∏–º–∞:')
    bot.register_next_step_handler(sent, command_antonym)


# –ü–æ–∏—Å–∫ –∞–Ω—Ç–æ–Ω–∏–º–æ–≤ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∞–Ω—Ç–æ–Ω–∏–º–∞)
def command_antonym(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω—Ç–æ–Ω–∏–º–∞', callback_data='antonym'),
                 telebot.types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', callback_data='back'))

    bot.send_message(message.chat.id, get_antonym(message.text), reply_markup=keyboard)


# –†–∞—Å—á–µ—Ç –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π (–≤–≤–æ–¥ –¥–∞—Ç—ã)
@bot.message_handler(commands=['days_lived'])
def command_input_days_lived(message):
    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:')
    bot.register_next_step_handler(sent, command_days_lived)


# –†–∞—Å—á–µ—Ç –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
def command_days_lived(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton(text='–†–∞—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='days_lived'),
                 telebot.types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', callback_data='back'))

    bot.send_message(message.chat.id, days_lived(message.text), reply_markup=keyboard)


# –ì–æ—Ä–æ—Å–∫–æ–ø (–≤–≤–æ–¥ –¥–∞—Ç—ã)
@bot.message_handler(commands=['horoscope'])
def command_input_horoscope(message):
    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:')
    bot.register_next_step_handler(sent, command_horoscope)


# –í—ã–≤–æ–¥ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
def command_horoscope(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø', callback_data='horoscope'),
                 telebot.types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', callback_data='back'))

    bot.send_message(message.chat.id, get_horoscope(message.text), reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    if call.data == 'back':
        command_start(call.message)
    elif call.data == 'coin':
        command_coin(call.message)
    elif call.data == 'cube':
        command_cube(call.message)
    elif call.data == 'synonym':
        command_input_synonym(call.message)
    elif call.data == 'antonym':
        command_input_antonym(call.message)
    elif call.data == 'days_lived':
        command_input_days_lived(call.message)
    elif call.data == 'horoscope':
        command_input_horoscope(call.message)
    # –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)


bot.polling()
